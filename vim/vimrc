set nocompatible
set showmode
"" Pathogen
execute pathogen#infect()

"" vim-plug
call plug#begin('~/.config/nvim/plugged')
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install all' }
Plug 'junegunn/fzf.vim'
Plug 'scrooloose/nerdcommenter'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'scrooloose/nerdtree'
Plug 'Xuyuanp/nerdtree-git-plugin'
Plug 'airblade/vim-gitgutter'
Plug 'airblade/vim-rooter'
Plug 'myusuf3/numbers.vim'
Plug 'Chiel92/vim-autoformat'
Plug 'w0rp/ale'
Plug 'fatih/vim-go', { 'do': ':GoUpdateBinaries' }
Plug 'neoclide/coc.nvim', {'do': 'yarn install --frozen-lockfile'}
call plug#end()

au FileType pug setl sw=2 sts=2 et
"" Hide buffer
set hidden

"" Wrap lines
set nowrap

"" Tab 4 spaces
set tabstop=4

"" Line numbers
set number

"" backspace fix
set backspace=indent,eol,start

"" fix copy paste
set clipboard=unnamed

"" Undofile
if !isdirectory($HOME."/.vim")
    call mkdir($HOME."/.vim", "", 0770)
endif
if !isdirectory($HOME."/.vim/undo-dir")
    call mkdir($HOME."/.vim/undo-dir", "", 0700)
endif
set undodir=~/.vim/undo-dir
set undofile

"" Indent
set autoindent
set copyindent
" # of spaces to indent 
set shiftwidth=4
set shiftround
set expandtab

"" Search
set showmatch
" Stop searching
nnoremap <c-l> :noh<return><c-l>

" case sensitive search
set ignorecase
set hlsearch
set incsearch

"" Remember many previous commands 
set history=1000

"" Undo 1000 times
set undolevels=1000

"" Change terminal title
set title

"" No sounds
set visualbell
set noerrorbells

"" No trashes
set nobackup
set noswapfile

"" Folding
set foldmethod=indent
set foldlevel=20

"" Open NERDTree on startup
"autocmd vimenter * NERDTree | wincmd p

"" Open NERDTree using shortcut
nmap <F6> :NERDTreeToggle<CR>


"dont show lines in nerdtree
let g:numbers_exclude = ['nerdtree']

"" git diff update time
set updatetime=250

"" Mac Preferences 
syntax enable
set background=dark
set t_Co=256 
colorscheme kuroi
set titleold=
set laststatus=2
set lazyredraw
let g:airline#extensions#whitespace#show_message=0
let g:airline_powerline_fonts=1
let g:airline_theme="wombat"
if !exists('g:airline_symbols')
	let g:airline_symbols={}
endif

"" Display symbols
set encoding=utf-8

"" FormatJSON command
com! FormatJSON %!python -m json.tool

"" Set list chars
set listchars=tab:>\ ,trail:-,nbsp:+,eol:$

"" Ale config
nmap <F8> <Plug>(ale_fix)
let b:ale_fixers = {
            \'go': ['gofmt'],
            \'rust': ['rustfmt'],
            \'python': ['autopep8']
            \}

let g:ale_linters = {
	\'go': ['gopls'],
	\'python': ['pylint', 'flake8']
	\}

"" autopep8 options
let g:ale_python_autopep8_options = "--max-line-length=120"

"" fzf config
map <C-p> :Files<CR>

"" go autocomplete
let g:go_def_mode='gopls'
let g:go_info_mode='gopls'
" let coc do the gd
let g:go_def_mapping_enabled = 0

" unicode symbols
let g:airline_left_sep = '¬ª'
let g:airline_left_sep = '‚ñ∂'
let g:airline_right_sep = '¬´'
let g:airline_right_sep = '‚óÄ'
let g:airline_symbols.crypt = 'üîí'
let g:airline_symbols.linenr = '‚êä'
let g:airline_symbols.linenr = '‚ê§'
let g:airline_symbols.linenr = '¬∂'
let g:airline_symbols.branch = '‚éá'
let g:airline_symbols.paste = 'œÅ'
let g:airline_symbols.paste = '√û'
let g:airline_symbols.paste = '‚à•'
let g:airline_symbols.whitespace = ''

"" Coc setup
" Better display for messages
set cmdheight=2
" Smaller updatetime for CursorHold & CursorHoldI
set updatetime=300
" don't give |ins-completion-menu| messages.
set shortmess+=c
" always show signcolumns
set signcolumn=yes

" Use tab for trigger completion with characters ahead and navigate.
" Use command ':verbose imap <tab>' to make sure tab is not mapped by other plugin.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
inoremap <silent><expr> <c-space> coc#refresh()

" Remap keys for gotos
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Show all diagnostics
nnoremap <silent> <space>a  :<C-u>CocList diagnostics<cr>
" Find symbol of current document
nnoremap <silent> <space>o  :<C-u>CocList outline<cr>
